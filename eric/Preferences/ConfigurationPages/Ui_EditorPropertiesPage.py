# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'E:\project\github\eric6-17.08\eric\Preferences\ConfigurationPages\EditorPropertiesPage.ui'
#
# Created by: PyQt5 UI code generator 5.9
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_EditorPropertiesPage(object):
    def setupUi(self, EditorPropertiesPage):
        EditorPropertiesPage.setObjectName("EditorPropertiesPage")
        EditorPropertiesPage.resize(558, 2930)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(EditorPropertiesPage)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.headerLabel = QtWidgets.QLabel(EditorPropertiesPage)
        self.headerLabel.setObjectName("headerLabel")
        self.verticalLayout_2.addWidget(self.headerLabel)
        self.line4 = QtWidgets.QFrame(EditorPropertiesPage)
        self.line4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line4.setObjectName("line4")
        self.verticalLayout_2.addWidget(self.line4)
        self.groupBox_2 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_2.setObjectName("groupBox_2")
        self.vboxlayout = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.vboxlayout.setObjectName("vboxlayout")
        self.allFoldCompactCheckBox = QtWidgets.QCheckBox(self.groupBox_2)
        self.allFoldCompactCheckBox.setObjectName("allFoldCompactCheckBox")
        self.vboxlayout.addWidget(self.allFoldCompactCheckBox)
        self.verticalLayout_2.addWidget(self.groupBox_2)
        self.groupBox = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox.setObjectName("groupBox")
        self.vboxlayout1 = QtWidgets.QVBoxLayout(self.groupBox)
        self.vboxlayout1.setObjectName("vboxlayout1")
        self.foldBashCommentCheckBox = QtWidgets.QCheckBox(self.groupBox)
        self.foldBashCommentCheckBox.setObjectName("foldBashCommentCheckBox")
        self.vboxlayout1.addWidget(self.foldBashCommentCheckBox)
        self.verticalLayout_2.addWidget(self.groupBox)
        self.groupBox_3 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_3.setObjectName("groupBox_3")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.groupBox_3)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.foldCppCommentCheckBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.foldCppCommentCheckBox.setObjectName("foldCppCommentCheckBox")
        self.gridLayout_5.addWidget(self.foldCppCommentCheckBox, 0, 0, 1, 1)
        self.foldCppAtElseCheckBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.foldCppAtElseCheckBox.setObjectName("foldCppAtElseCheckBox")
        self.gridLayout_5.addWidget(self.foldCppAtElseCheckBox, 0, 1, 1, 1)
        self.foldCppPreprocessorCheckBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.foldCppPreprocessorCheckBox.setObjectName("foldCppPreprocessorCheckBox")
        self.gridLayout_5.addWidget(self.foldCppPreprocessorCheckBox, 1, 0, 1, 1)
        self.cppIndentOpeningBraceCheckBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.cppIndentOpeningBraceCheckBox.setObjectName("cppIndentOpeningBraceCheckBox")
        self.gridLayout_5.addWidget(self.cppIndentOpeningBraceCheckBox, 2, 0, 1, 1)
        self.cppIndentClosingBraceCheckBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.cppIndentClosingBraceCheckBox.setObjectName("cppIndentClosingBraceCheckBox")
        self.gridLayout_5.addWidget(self.cppIndentClosingBraceCheckBox, 2, 1, 1, 1)
        self.cppCaseInsensitiveCheckBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.cppCaseInsensitiveCheckBox.setObjectName("cppCaseInsensitiveCheckBox")
        self.gridLayout_5.addWidget(self.cppCaseInsensitiveCheckBox, 3, 0, 1, 1)
        self.cppDollarAllowedCheckBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.cppDollarAllowedCheckBox.setObjectName("cppDollarAllowedCheckBox")
        self.gridLayout_5.addWidget(self.cppDollarAllowedCheckBox, 3, 1, 1, 1)
        self.cppStylePreprocessorCheckBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.cppStylePreprocessorCheckBox.setObjectName("cppStylePreprocessorCheckBox")
        self.gridLayout_5.addWidget(self.cppStylePreprocessorCheckBox, 4, 0, 1, 1)
        self.cppHighlightTripleQuotedCheckBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.cppHighlightTripleQuotedCheckBox.setObjectName("cppHighlightTripleQuotedCheckBox")
        self.gridLayout_5.addWidget(self.cppHighlightTripleQuotedCheckBox, 5, 0, 1, 1)
        self.cppHighlightHashQuotedCheckBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.cppHighlightHashQuotedCheckBox.setObjectName("cppHighlightHashQuotedCheckBox")
        self.gridLayout_5.addWidget(self.cppHighlightHashQuotedCheckBox, 5, 1, 1, 1)
        self.cppHighlightBackQuotedCheckBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.cppHighlightBackQuotedCheckBox.setObjectName("cppHighlightBackQuotedCheckBox")
        self.gridLayout_5.addWidget(self.cppHighlightBackQuotedCheckBox, 6, 0, 1, 1)
        self.cppHighlightEsacepSequencesCheckBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.cppHighlightEsacepSequencesCheckBox.setObjectName("cppHighlightEsacepSequencesCheckBox")
        self.gridLayout_5.addWidget(self.cppHighlightEsacepSequencesCheckBox, 6, 1, 1, 1)
        self.cppVerbatimStringEscapeAllowedCheckBox = QtWidgets.QCheckBox(self.groupBox_3)
        self.cppVerbatimStringEscapeAllowedCheckBox.setObjectName("cppVerbatimStringEscapeAllowedCheckBox")
        self.gridLayout_5.addWidget(self.cppVerbatimStringEscapeAllowedCheckBox, 7, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.groupBox_3)
        self.groupBox_7 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_7.setObjectName("groupBox_7")
        self.gridlayout = QtWidgets.QGridLayout(self.groupBox_7)
        self.gridlayout.setObjectName("gridlayout")
        self.cmakeFoldAtElseCheckBox = QtWidgets.QCheckBox(self.groupBox_7)
        self.cmakeFoldAtElseCheckBox.setObjectName("cmakeFoldAtElseCheckBox")
        self.gridlayout.addWidget(self.cmakeFoldAtElseCheckBox, 0, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.groupBox_7)
        self.coffeeScriptGroup = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.coffeeScriptGroup.setObjectName("coffeeScriptGroup")
        self.gridLayout_11 = QtWidgets.QGridLayout(self.coffeeScriptGroup)
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.foldCoffeeScriptCommentCheckBox = QtWidgets.QCheckBox(self.coffeeScriptGroup)
        self.foldCoffeeScriptCommentCheckBox.setObjectName("foldCoffeeScriptCommentCheckBox")
        self.gridLayout_11.addWidget(self.foldCoffeeScriptCommentCheckBox, 0, 0, 1, 1)
        self.coffeeScriptDollarAllowedCheckBox = QtWidgets.QCheckBox(self.coffeeScriptGroup)
        self.coffeeScriptDollarAllowedCheckBox.setObjectName("coffeeScriptDollarAllowedCheckBox")
        self.gridLayout_11.addWidget(self.coffeeScriptDollarAllowedCheckBox, 0, 1, 1, 1)
        self.coffeeScriptStylePreprocessorCheckBox = QtWidgets.QCheckBox(self.coffeeScriptGroup)
        self.coffeeScriptStylePreprocessorCheckBox.setObjectName("coffeeScriptStylePreprocessorCheckBox")
        self.gridLayout_11.addWidget(self.coffeeScriptStylePreprocessorCheckBox, 1, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.coffeeScriptGroup)
        self.groupBox_4 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_4.setObjectName("groupBox_4")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.groupBox_4)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.foldCssCommentCheckBox = QtWidgets.QCheckBox(self.groupBox_4)
        self.foldCssCommentCheckBox.setObjectName("foldCssCommentCheckBox")
        self.gridLayout_10.addWidget(self.foldCssCommentCheckBox, 0, 0, 1, 1)
        self.cssHssCheckBox = QtWidgets.QCheckBox(self.groupBox_4)
        self.cssHssCheckBox.setObjectName("cssHssCheckBox")
        self.gridLayout_10.addWidget(self.cssHssCheckBox, 1, 0, 1, 1)
        self.cssLessCheckBox = QtWidgets.QCheckBox(self.groupBox_4)
        self.cssLessCheckBox.setObjectName("cssLessCheckBox")
        self.gridLayout_10.addWidget(self.cssLessCheckBox, 1, 1, 1, 1)
        self.cssSassyCheckBox = QtWidgets.QCheckBox(self.groupBox_4)
        self.cssSassyCheckBox.setObjectName("cssSassyCheckBox")
        self.gridLayout_10.addWidget(self.cssSassyCheckBox, 2, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.groupBox_4)
        self.groupBox_6 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_6.setObjectName("groupBox_6")
        self._7 = QtWidgets.QGridLayout(self.groupBox_6)
        self._7.setObjectName("_7")
        self.dIndentClosingBraceCheckBox = QtWidgets.QCheckBox(self.groupBox_6)
        self.dIndentClosingBraceCheckBox.setObjectName("dIndentClosingBraceCheckBox")
        self._7.addWidget(self.dIndentClosingBraceCheckBox, 1, 1, 1, 1)
        self.dIndentOpeningBraceCheckBox = QtWidgets.QCheckBox(self.groupBox_6)
        self.dIndentOpeningBraceCheckBox.setObjectName("dIndentOpeningBraceCheckBox")
        self._7.addWidget(self.dIndentOpeningBraceCheckBox, 1, 0, 1, 1)
        self.foldDAtElseCheckBox = QtWidgets.QCheckBox(self.groupBox_6)
        self.foldDAtElseCheckBox.setObjectName("foldDAtElseCheckBox")
        self._7.addWidget(self.foldDAtElseCheckBox, 0, 1, 1, 1)
        self.foldDCommentCheckBox = QtWidgets.QCheckBox(self.groupBox_6)
        self.foldDCommentCheckBox.setObjectName("foldDCommentCheckBox")
        self._7.addWidget(self.foldDCommentCheckBox, 0, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.groupBox_6)
        self.gettextGroup = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.gettextGroup.setObjectName("gettextGroup")
        self._5 = QtWidgets.QVBoxLayout(self.gettextGroup)
        self._5.setObjectName("_5")
        self.foldPoCommentCheckBox = QtWidgets.QCheckBox(self.gettextGroup)
        self.foldPoCommentCheckBox.setObjectName("foldPoCommentCheckBox")
        self._5.addWidget(self.foldPoCommentCheckBox)
        self.verticalLayout_2.addWidget(self.gettextGroup)
        self.groupBox_10 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_10.setObjectName("groupBox_10")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.groupBox_10)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.foldHtmlPreprocessorCheckBox = QtWidgets.QCheckBox(self.groupBox_10)
        self.foldHtmlPreprocessorCheckBox.setObjectName("foldHtmlPreprocessorCheckBox")
        self.gridLayout_7.addWidget(self.foldHtmlPreprocessorCheckBox, 0, 0, 1, 1)
        self.foldHtmlScriptCommentsCheckBox = QtWidgets.QCheckBox(self.groupBox_10)
        self.foldHtmlScriptCommentsCheckBox.setObjectName("foldHtmlScriptCommentsCheckBox")
        self.gridLayout_7.addWidget(self.foldHtmlScriptCommentsCheckBox, 1, 0, 1, 1)
        self.foldHtmlScriptHereDocsCheckBox = QtWidgets.QCheckBox(self.groupBox_10)
        self.foldHtmlScriptHereDocsCheckBox.setObjectName("foldHtmlScriptHereDocsCheckBox")
        self.gridLayout_7.addWidget(self.foldHtmlScriptHereDocsCheckBox, 1, 1, 1, 1)
        self.htmlCaseSensitiveTagsCheckBox = QtWidgets.QCheckBox(self.groupBox_10)
        self.htmlCaseSensitiveTagsCheckBox.setObjectName("htmlCaseSensitiveTagsCheckBox")
        self.gridLayout_7.addWidget(self.htmlCaseSensitiveTagsCheckBox, 2, 0, 1, 1)
        self.htmlDjangoCheckBox = QtWidgets.QCheckBox(self.groupBox_10)
        self.htmlDjangoCheckBox.setObjectName("htmlDjangoCheckBox")
        self.gridLayout_7.addWidget(self.htmlDjangoCheckBox, 3, 0, 1, 1)
        self.htmlMakoCheckBox = QtWidgets.QCheckBox(self.groupBox_10)
        self.htmlMakoCheckBox.setObjectName("htmlMakoCheckBox")
        self.gridLayout_7.addWidget(self.htmlMakoCheckBox, 3, 1, 1, 1)
        self.xmlGroup = QtWidgets.QGroupBox(self.groupBox_10)
        self.xmlGroup.setObjectName("xmlGroup")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.xmlGroup)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.xmlSyleScriptsCheckBox = QtWidgets.QCheckBox(self.xmlGroup)
        self.xmlSyleScriptsCheckBox.setObjectName("xmlSyleScriptsCheckBox")
        self.gridLayout_6.addWidget(self.xmlSyleScriptsCheckBox, 0, 0, 1, 1)
        self.gridLayout_7.addWidget(self.xmlGroup, 4, 0, 1, 2)
        self.verticalLayout_2.addWidget(self.groupBox_10)
        self.jsonGroup = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.jsonGroup.setObjectName("jsonGroup")
        self.gridLayout_12 = QtWidgets.QGridLayout(self.jsonGroup)
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.jsonHighlightCommentsCheckBox = QtWidgets.QCheckBox(self.jsonGroup)
        self.jsonHighlightCommentsCheckBox.setObjectName("jsonHighlightCommentsCheckBox")
        self.gridLayout_12.addWidget(self.jsonHighlightCommentsCheckBox, 0, 0, 1, 1)
        self.jsonHighlightEscapeCheckBox = QtWidgets.QCheckBox(self.jsonGroup)
        self.jsonHighlightEscapeCheckBox.setObjectName("jsonHighlightEscapeCheckBox")
        self.gridLayout_12.addWidget(self.jsonHighlightEscapeCheckBox, 0, 1, 1, 1)
        self.verticalLayout_2.addWidget(self.jsonGroup)
        self.pascalGroup = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.pascalGroup.setObjectName("pascalGroup")
        self.gridLayout = QtWidgets.QGridLayout(self.pascalGroup)
        self.gridLayout.setObjectName("gridLayout")
        self.foldPascalCommentCheckBox = QtWidgets.QCheckBox(self.pascalGroup)
        self.foldPascalCommentCheckBox.setObjectName("foldPascalCommentCheckBox")
        self.gridLayout.addWidget(self.foldPascalCommentCheckBox, 0, 0, 1, 1)
        self.foldPascalPreprocessorCheckBox = QtWidgets.QCheckBox(self.pascalGroup)
        self.foldPascalPreprocessorCheckBox.setObjectName("foldPascalPreprocessorCheckBox")
        self.gridLayout.addWidget(self.foldPascalPreprocessorCheckBox, 0, 1, 1, 1)
        self.pascalSmartHighlightingCheckBox = QtWidgets.QCheckBox(self.pascalGroup)
        self.pascalSmartHighlightingCheckBox.setObjectName("pascalSmartHighlightingCheckBox")
        self.gridLayout.addWidget(self.pascalSmartHighlightingCheckBox, 1, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.pascalGroup)
        self.groupBox_9 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_9.setObjectName("groupBox_9")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.groupBox_9)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.foldPerlCommentCheckBox = QtWidgets.QCheckBox(self.groupBox_9)
        self.foldPerlCommentCheckBox.setObjectName("foldPerlCommentCheckBox")
        self.gridLayout_4.addWidget(self.foldPerlCommentCheckBox, 0, 0, 1, 1)
        self.foldPerlPackagesCheckBox = QtWidgets.QCheckBox(self.groupBox_9)
        self.foldPerlPackagesCheckBox.setObjectName("foldPerlPackagesCheckBox")
        self.gridLayout_4.addWidget(self.foldPerlPackagesCheckBox, 0, 1, 1, 1)
        self.foldPerlPODBlocksCheckBox = QtWidgets.QCheckBox(self.groupBox_9)
        self.foldPerlPODBlocksCheckBox.setObjectName("foldPerlPODBlocksCheckBox")
        self.gridLayout_4.addWidget(self.foldPerlPODBlocksCheckBox, 1, 0, 1, 1)
        self.foldPerlAtElseCheckBox = QtWidgets.QCheckBox(self.groupBox_9)
        self.foldPerlAtElseCheckBox.setObjectName("foldPerlAtElseCheckBox")
        self.gridLayout_4.addWidget(self.foldPerlAtElseCheckBox, 1, 1, 1, 1)
        self.verticalLayout_2.addWidget(self.groupBox_9)
        self.postscriptGroup = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.postscriptGroup.setObjectName("postscriptGroup")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.postscriptGroup)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.psFoldAtElseCheckBox = QtWidgets.QCheckBox(self.postscriptGroup)
        self.psFoldAtElseCheckBox.setObjectName("psFoldAtElseCheckBox")
        self.gridLayout_2.addWidget(self.psFoldAtElseCheckBox, 0, 0, 1, 1)
        self.psMarkTokensCheckBox = QtWidgets.QCheckBox(self.postscriptGroup)
        self.psMarkTokensCheckBox.setObjectName("psMarkTokensCheckBox")
        self.gridLayout_2.addWidget(self.psMarkTokensCheckBox, 0, 1, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.postscriptGroup)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.psLevelSpinBox = QtWidgets.QSpinBox(self.postscriptGroup)
        self.psLevelSpinBox.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.psLevelSpinBox.setMinimum(1)
        self.psLevelSpinBox.setMaximum(9)
        self.psLevelSpinBox.setProperty("value", 3)
        self.psLevelSpinBox.setObjectName("psLevelSpinBox")
        self.horizontalLayout.addWidget(self.psLevelSpinBox)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.gridLayout_2.addLayout(self.horizontalLayout, 1, 0, 1, 2)
        self.verticalLayout_2.addWidget(self.postscriptGroup)
        self.groupBox_5 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_5.setObjectName("groupBox_5")
        self._8 = QtWidgets.QGridLayout(self.groupBox_5)
        self._8.setObjectName("_8")
        self.foldPovrayDirectivesCheckBox = QtWidgets.QCheckBox(self.groupBox_5)
        self.foldPovrayDirectivesCheckBox.setObjectName("foldPovrayDirectivesCheckBox")
        self._8.addWidget(self.foldPovrayDirectivesCheckBox, 0, 1, 1, 1)
        self.foldPovrayCommentCheckBox = QtWidgets.QCheckBox(self.groupBox_5)
        self.foldPovrayCommentCheckBox.setObjectName("foldPovrayCommentCheckBox")
        self._8.addWidget(self.foldPovrayCommentCheckBox, 0, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.groupBox_5)
        self.groupBox_13 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_13.setObjectName("groupBox_13")
        self._2 = QtWidgets.QVBoxLayout(self.groupBox_13)
        self._2.setObjectName("_2")
        self.propertiesInitialSpacesCheckBox = QtWidgets.QCheckBox(self.groupBox_13)
        self.propertiesInitialSpacesCheckBox.setObjectName("propertiesInitialSpacesCheckBox")
        self._2.addWidget(self.propertiesInitialSpacesCheckBox)
        self.verticalLayout_2.addWidget(self.groupBox_13)
        self.groupBox_8 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_8.setObjectName("groupBox_8")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox_8)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.foldPythonCommentCheckBox = QtWidgets.QCheckBox(self.groupBox_8)
        self.foldPythonCommentCheckBox.setObjectName("foldPythonCommentCheckBox")
        self.gridLayout_3.addWidget(self.foldPythonCommentCheckBox, 0, 0, 1, 1)
        self.foldPythonStringCheckBox = QtWidgets.QCheckBox(self.groupBox_8)
        self.foldPythonStringCheckBox.setObjectName("foldPythonStringCheckBox")
        self.gridLayout_3.addWidget(self.foldPythonStringCheckBox, 0, 1, 1, 1)
        self.foldPythonQuotesCheckBox = QtWidgets.QCheckBox(self.groupBox_8)
        self.foldPythonQuotesCheckBox.setObjectName("foldPythonQuotesCheckBox")
        self.gridLayout_3.addWidget(self.foldPythonQuotesCheckBox, 1, 0, 1, 1)
        self.pythonAutoindentCheckBox = QtWidgets.QCheckBox(self.groupBox_8)
        self.pythonAutoindentCheckBox.setObjectName("pythonAutoindentCheckBox")
        self.gridLayout_3.addWidget(self.pythonAutoindentCheckBox, 2, 0, 1, 1)
        self.pythonStringsOverNewlineCheckBox = QtWidgets.QCheckBox(self.groupBox_8)
        self.pythonStringsOverNewlineCheckBox.setObjectName("pythonStringsOverNewlineCheckBox")
        self.gridLayout_3.addWidget(self.pythonStringsOverNewlineCheckBox, 3, 0, 1, 1)
        self.pythonV2UnicodeAllowedCheckBox = QtWidgets.QCheckBox(self.groupBox_8)
        self.pythonV2UnicodeAllowedCheckBox.setObjectName("pythonV2UnicodeAllowedCheckBox")
        self.gridLayout_3.addWidget(self.pythonV2UnicodeAllowedCheckBox, 4, 0, 1, 1)
        self.pythonV3BinaryAllowedCheckBox = QtWidgets.QCheckBox(self.groupBox_8)
        self.pythonV3BinaryAllowedCheckBox.setObjectName("pythonV3BinaryAllowedCheckBox")
        self.gridLayout_3.addWidget(self.pythonV3BinaryAllowedCheckBox, 5, 0, 1, 1)
        self.pythonV3BytesAllowedCheckBox = QtWidgets.QCheckBox(self.groupBox_8)
        self.pythonV3BytesAllowedCheckBox.setObjectName("pythonV3BytesAllowedCheckBox")
        self.gridLayout_3.addWidget(self.pythonV3BytesAllowedCheckBox, 5, 1, 1, 1)
        self.pythonHighlightSubidentifierCheckBox = QtWidgets.QCheckBox(self.groupBox_8)
        self.pythonHighlightSubidentifierCheckBox.setObjectName("pythonHighlightSubidentifierCheckBox")
        self.gridLayout_3.addWidget(self.pythonHighlightSubidentifierCheckBox, 6, 0, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.groupBox_8)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.pythonBadIndentationComboBox = QtWidgets.QComboBox(self.groupBox_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pythonBadIndentationComboBox.sizePolicy().hasHeightForWidth())
        self.pythonBadIndentationComboBox.setSizePolicy(sizePolicy)
        self.pythonBadIndentationComboBox.setObjectName("pythonBadIndentationComboBox")
        self.horizontalLayout_2.addWidget(self.pythonBadIndentationComboBox)
        self.gridLayout_3.addLayout(self.horizontalLayout_2, 7, 0, 1, 2)
        self.verticalLayout_2.addWidget(self.groupBox_8)
        self.groupBox_14 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_14.setObjectName("groupBox_14")
        self._3 = QtWidgets.QVBoxLayout(self.groupBox_14)
        self._3.setObjectName("_3")
        self.foldRubyCommentCheckBox = QtWidgets.QCheckBox(self.groupBox_14)
        self.foldRubyCommentCheckBox.setObjectName("foldRubyCommentCheckBox")
        self._3.addWidget(self.foldRubyCommentCheckBox)
        self.verticalLayout_2.addWidget(self.groupBox_14)
        self.groupBox_12 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_12.setObjectName("groupBox_12")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.groupBox_12)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.foldSqlCommentCheckBox = QtWidgets.QCheckBox(self.groupBox_12)
        self.foldSqlCommentCheckBox.setObjectName("foldSqlCommentCheckBox")
        self.gridLayout_8.addWidget(self.foldSqlCommentCheckBox, 0, 0, 1, 1)
        self.sqlFoldAtElseCheckBox = QtWidgets.QCheckBox(self.groupBox_12)
        self.sqlFoldAtElseCheckBox.setObjectName("sqlFoldAtElseCheckBox")
        self.gridLayout_8.addWidget(self.sqlFoldAtElseCheckBox, 0, 1, 1, 1)
        self.sqlFoldOnlyBeginCheckBox = QtWidgets.QCheckBox(self.groupBox_12)
        self.sqlFoldOnlyBeginCheckBox.setObjectName("sqlFoldOnlyBeginCheckBox")
        self.gridLayout_8.addWidget(self.sqlFoldOnlyBeginCheckBox, 1, 0, 1, 2)
        self.sqlBackslashEscapesCheckBox = QtWidgets.QCheckBox(self.groupBox_12)
        self.sqlBackslashEscapesCheckBox.setObjectName("sqlBackslashEscapesCheckBox")
        self.gridLayout_8.addWidget(self.sqlBackslashEscapesCheckBox, 2, 0, 1, 1)
        self.sqlDottedWordsCheckBox = QtWidgets.QCheckBox(self.groupBox_12)
        self.sqlDottedWordsCheckBox.setObjectName("sqlDottedWordsCheckBox")
        self.gridLayout_8.addWidget(self.sqlDottedWordsCheckBox, 2, 1, 1, 1)
        self.sqlHashCommentsCheckBox = QtWidgets.QCheckBox(self.groupBox_12)
        self.sqlHashCommentsCheckBox.setObjectName("sqlHashCommentsCheckBox")
        self.gridLayout_8.addWidget(self.sqlHashCommentsCheckBox, 3, 0, 1, 1)
        self.sqlQuotedIdentifiersCheckBox = QtWidgets.QCheckBox(self.groupBox_12)
        self.sqlQuotedIdentifiersCheckBox.setObjectName("sqlQuotedIdentifiersCheckBox")
        self.gridLayout_8.addWidget(self.sqlQuotedIdentifiersCheckBox, 3, 1, 1, 1)
        self.verticalLayout_2.addWidget(self.groupBox_12)
        self.groupBox_15 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_15.setObjectName("groupBox_15")
        self._4 = QtWidgets.QVBoxLayout(self.groupBox_15)
        self._4.setObjectName("_4")
        self.foldTclCommentCheckBox = QtWidgets.QCheckBox(self.groupBox_15)
        self.foldTclCommentCheckBox.setObjectName("foldTclCommentCheckBox")
        self._4.addWidget(self.foldTclCommentCheckBox)
        self.verticalLayout_2.addWidget(self.groupBox_15)
        self.groupBox_16 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_16.setObjectName("groupBox_16")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.groupBox_16)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.foldTexCommentCheckBox = QtWidgets.QCheckBox(self.groupBox_16)
        self.foldTexCommentCheckBox.setObjectName("foldTexCommentCheckBox")
        self.gridLayout_9.addWidget(self.foldTexCommentCheckBox, 0, 0, 1, 1)
        self.texProcessCommentsCheckBox = QtWidgets.QCheckBox(self.groupBox_16)
        self.texProcessCommentsCheckBox.setObjectName("texProcessCommentsCheckBox")
        self.gridLayout_9.addWidget(self.texProcessCommentsCheckBox, 1, 0, 1, 1)
        self.texProcessIfCheckBox = QtWidgets.QCheckBox(self.groupBox_16)
        self.texProcessIfCheckBox.setObjectName("texProcessIfCheckBox")
        self.gridLayout_9.addWidget(self.texProcessIfCheckBox, 1, 1, 1, 1)
        self.verticalLayout_2.addWidget(self.groupBox_16)
        self.groupBox_11 = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.groupBox_11.setObjectName("groupBox_11")
        self._12 = QtWidgets.QGridLayout(self.groupBox_11)
        self._12.setObjectName("_12")
        self.vhdlFoldAtParenthesisCheckBox = QtWidgets.QCheckBox(self.groupBox_11)
        self.vhdlFoldAtParenthesisCheckBox.setObjectName("vhdlFoldAtParenthesisCheckBox")
        self._12.addWidget(self.vhdlFoldAtParenthesisCheckBox, 1, 1, 1, 1)
        self.vhdlFoldAtBeginCheckBox = QtWidgets.QCheckBox(self.groupBox_11)
        self.vhdlFoldAtBeginCheckBox.setObjectName("vhdlFoldAtBeginCheckBox")
        self._12.addWidget(self.vhdlFoldAtBeginCheckBox, 1, 0, 1, 1)
        self.vhdlFoldAtElseCheckBox = QtWidgets.QCheckBox(self.groupBox_11)
        self.vhdlFoldAtElseCheckBox.setObjectName("vhdlFoldAtElseCheckBox")
        self._12.addWidget(self.vhdlFoldAtElseCheckBox, 0, 1, 1, 1)
        self.vhdlFoldCommentCheckBox = QtWidgets.QCheckBox(self.groupBox_11)
        self.vhdlFoldCommentCheckBox.setObjectName("vhdlFoldCommentCheckBox")
        self._12.addWidget(self.vhdlFoldCommentCheckBox, 0, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.groupBox_11)
        self.yamlGroup = QtWidgets.QGroupBox(EditorPropertiesPage)
        self.yamlGroup.setObjectName("yamlGroup")
        self._14 = QtWidgets.QVBoxLayout(self.yamlGroup)
        self._14.setObjectName("_14")
        self.foldYamlCommentCheckBox = QtWidgets.QCheckBox(self.yamlGroup)
        self.foldYamlCommentCheckBox.setObjectName("foldYamlCommentCheckBox")
        self._14.addWidget(self.foldYamlCommentCheckBox)
        self.verticalLayout_2.addWidget(self.yamlGroup)
        spacerItem1 = QtWidgets.QSpacerItem(467, 21, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem1)

        self.retranslateUi(EditorPropertiesPage)
        QtCore.QMetaObject.connectSlotsByName(EditorPropertiesPage)
        EditorPropertiesPage.setTabOrder(self.allFoldCompactCheckBox, self.foldBashCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldBashCommentCheckBox, self.foldCppCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldCppCommentCheckBox, self.foldCppAtElseCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldCppAtElseCheckBox, self.foldCppPreprocessorCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldCppPreprocessorCheckBox, self.cppIndentOpeningBraceCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppIndentOpeningBraceCheckBox, self.cppIndentClosingBraceCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppIndentClosingBraceCheckBox, self.cppCaseInsensitiveCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppCaseInsensitiveCheckBox, self.cppDollarAllowedCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppDollarAllowedCheckBox, self.cppStylePreprocessorCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppStylePreprocessorCheckBox, self.cppHighlightTripleQuotedCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppHighlightTripleQuotedCheckBox, self.cppHighlightHashQuotedCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppHighlightHashQuotedCheckBox, self.cppHighlightBackQuotedCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppHighlightBackQuotedCheckBox, self.cppHighlightEsacepSequencesCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppHighlightEsacepSequencesCheckBox, self.cppVerbatimStringEscapeAllowedCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppVerbatimStringEscapeAllowedCheckBox, self.cmakeFoldAtElseCheckBox)
        EditorPropertiesPage.setTabOrder(self.cmakeFoldAtElseCheckBox, self.foldCoffeeScriptCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldCoffeeScriptCommentCheckBox, self.coffeeScriptDollarAllowedCheckBox)
        EditorPropertiesPage.setTabOrder(self.coffeeScriptDollarAllowedCheckBox, self.coffeeScriptStylePreprocessorCheckBox)
        EditorPropertiesPage.setTabOrder(self.coffeeScriptStylePreprocessorCheckBox, self.foldCssCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldCssCommentCheckBox, self.cssHssCheckBox)
        EditorPropertiesPage.setTabOrder(self.cssHssCheckBox, self.cssLessCheckBox)
        EditorPropertiesPage.setTabOrder(self.cssLessCheckBox, self.cssSassyCheckBox)
        EditorPropertiesPage.setTabOrder(self.cssSassyCheckBox, self.foldDCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldDCommentCheckBox, self.foldDAtElseCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldDAtElseCheckBox, self.dIndentOpeningBraceCheckBox)
        EditorPropertiesPage.setTabOrder(self.dIndentOpeningBraceCheckBox, self.dIndentClosingBraceCheckBox)
        EditorPropertiesPage.setTabOrder(self.dIndentClosingBraceCheckBox, self.foldPoCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPoCommentCheckBox, self.foldHtmlPreprocessorCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldHtmlPreprocessorCheckBox, self.foldHtmlScriptCommentsCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldHtmlScriptCommentsCheckBox, self.foldHtmlScriptHereDocsCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldHtmlScriptHereDocsCheckBox, self.htmlCaseSensitiveTagsCheckBox)
        EditorPropertiesPage.setTabOrder(self.htmlCaseSensitiveTagsCheckBox, self.htmlDjangoCheckBox)
        EditorPropertiesPage.setTabOrder(self.htmlDjangoCheckBox, self.htmlMakoCheckBox)
        EditorPropertiesPage.setTabOrder(self.htmlMakoCheckBox, self.xmlSyleScriptsCheckBox)
        EditorPropertiesPage.setTabOrder(self.xmlSyleScriptsCheckBox, self.jsonHighlightCommentsCheckBox)
        EditorPropertiesPage.setTabOrder(self.jsonHighlightCommentsCheckBox, self.jsonHighlightEscapeCheckBox)
        EditorPropertiesPage.setTabOrder(self.jsonHighlightEscapeCheckBox, self.foldPascalCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPascalCommentCheckBox, self.foldPascalPreprocessorCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPascalPreprocessorCheckBox, self.pascalSmartHighlightingCheckBox)
        EditorPropertiesPage.setTabOrder(self.pascalSmartHighlightingCheckBox, self.foldPerlCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPerlCommentCheckBox, self.foldPerlPackagesCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPerlPackagesCheckBox, self.foldPerlPODBlocksCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPerlPODBlocksCheckBox, self.foldPerlAtElseCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPerlAtElseCheckBox, self.psFoldAtElseCheckBox)
        EditorPropertiesPage.setTabOrder(self.psFoldAtElseCheckBox, self.psMarkTokensCheckBox)
        EditorPropertiesPage.setTabOrder(self.psMarkTokensCheckBox, self.psLevelSpinBox)
        EditorPropertiesPage.setTabOrder(self.psLevelSpinBox, self.foldPovrayCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPovrayCommentCheckBox, self.foldPovrayDirectivesCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPovrayDirectivesCheckBox, self.propertiesInitialSpacesCheckBox)
        EditorPropertiesPage.setTabOrder(self.propertiesInitialSpacesCheckBox, self.foldPythonCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPythonCommentCheckBox, self.foldPythonStringCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPythonStringCheckBox, self.foldPythonQuotesCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPythonQuotesCheckBox, self.pythonAutoindentCheckBox)
        EditorPropertiesPage.setTabOrder(self.pythonAutoindentCheckBox, self.pythonStringsOverNewlineCheckBox)
        EditorPropertiesPage.setTabOrder(self.pythonStringsOverNewlineCheckBox, self.pythonV2UnicodeAllowedCheckBox)
        EditorPropertiesPage.setTabOrder(self.pythonV2UnicodeAllowedCheckBox, self.pythonV3BinaryAllowedCheckBox)
        EditorPropertiesPage.setTabOrder(self.pythonV3BinaryAllowedCheckBox, self.pythonV3BytesAllowedCheckBox)
        EditorPropertiesPage.setTabOrder(self.pythonV3BytesAllowedCheckBox, self.pythonHighlightSubidentifierCheckBox)
        EditorPropertiesPage.setTabOrder(self.pythonHighlightSubidentifierCheckBox, self.pythonBadIndentationComboBox)
        EditorPropertiesPage.setTabOrder(self.pythonBadIndentationComboBox, self.foldRubyCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldRubyCommentCheckBox, self.foldSqlCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldSqlCommentCheckBox, self.sqlFoldAtElseCheckBox)
        EditorPropertiesPage.setTabOrder(self.sqlFoldAtElseCheckBox, self.sqlFoldOnlyBeginCheckBox)
        EditorPropertiesPage.setTabOrder(self.sqlFoldOnlyBeginCheckBox, self.sqlBackslashEscapesCheckBox)
        EditorPropertiesPage.setTabOrder(self.sqlBackslashEscapesCheckBox, self.sqlDottedWordsCheckBox)
        EditorPropertiesPage.setTabOrder(self.sqlDottedWordsCheckBox, self.sqlHashCommentsCheckBox)
        EditorPropertiesPage.setTabOrder(self.sqlHashCommentsCheckBox, self.sqlQuotedIdentifiersCheckBox)
        EditorPropertiesPage.setTabOrder(self.sqlQuotedIdentifiersCheckBox, self.foldTclCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldTclCommentCheckBox, self.foldTexCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldTexCommentCheckBox, self.texProcessCommentsCheckBox)
        EditorPropertiesPage.setTabOrder(self.texProcessCommentsCheckBox, self.texProcessIfCheckBox)
        EditorPropertiesPage.setTabOrder(self.texProcessIfCheckBox, self.vhdlFoldCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.vhdlFoldCommentCheckBox, self.vhdlFoldAtElseCheckBox)
        EditorPropertiesPage.setTabOrder(self.vhdlFoldAtElseCheckBox, self.vhdlFoldAtBeginCheckBox)
        EditorPropertiesPage.setTabOrder(self.vhdlFoldAtBeginCheckBox, self.vhdlFoldAtParenthesisCheckBox)
        EditorPropertiesPage.setTabOrder(self.vhdlFoldAtParenthesisCheckBox, self.foldYamlCommentCheckBox)

    def retranslateUi(self, EditorPropertiesPage):
        _translate = QtCore.QCoreApplication.translate
        self.headerLabel.setText(_translate("EditorPropertiesPage", "<b>Configure lexer properties</b>"))
        self.groupBox_2.setTitle(_translate("EditorPropertiesPage", "All Lexers Properties"))
        self.allFoldCompactCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to include trailing blank lines in a fold block"))
        self.allFoldCompactCheckBox.setText(_translate("EditorPropertiesPage", "Fold compact (except CMake, Python)"))
        self.groupBox.setTitle(_translate("EditorPropertiesPage", "Bash Lexer Properties"))
        self.foldBashCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldBashCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.groupBox_3.setTitle(_translate("EditorPropertiesPage", "C++ , C# , IDL, Java and JavaScript Lexer Properties"))
        self.foldCppCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldCppCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.foldCppAtElseCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding at else statement should be possible"))
        self.foldCppAtElseCheckBox.setText(_translate("EditorPropertiesPage", "Fold at else"))
        self.foldCppPreprocessorCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of preprocessor directives shall be possible"))
        self.foldCppPreprocessorCheckBox.setText(_translate("EditorPropertiesPage", "Fold preprocessor directives"))
        self.cppIndentOpeningBraceCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select, whether the line containing the opening brace should be indented"))
        self.cppIndentOpeningBraceCheckBox.setText(_translate("EditorPropertiesPage", "Indent opening brace"))
        self.cppIndentClosingBraceCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select, whether the line containing the closing brace should be indented"))
        self.cppIndentClosingBraceCheckBox.setText(_translate("EditorPropertiesPage", "Indent closing brace"))
        self.cppCaseInsensitiveCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to use case insensitive keywords"))
        self.cppCaseInsensitiveCheckBox.setText(_translate("EditorPropertiesPage", "Case insensitive keywords (C/C++ only)"))
        self.cppDollarAllowedCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow \'$\' characters in identifier names"))
        self.cppDollarAllowedCheckBox.setText(_translate("EditorPropertiesPage", "Allow \'$\' in identifier names"))
        self.cppStylePreprocessorCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to style preprocessor lines"))
        self.cppStylePreprocessorCheckBox.setText(_translate("EditorPropertiesPage", "Style preprocessor lines"))
        self.cppHighlightTripleQuotedCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to highlight triple quoted strings"))
        self.cppHighlightTripleQuotedCheckBox.setText(_translate("EditorPropertiesPage", "Highlight triple quoted strings"))
        self.cppHighlightHashQuotedCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to highlight hash quoted strings"))
        self.cppHighlightHashQuotedCheckBox.setText(_translate("EditorPropertiesPage", "Highlight hash quoted strings"))
        self.cppHighlightBackQuotedCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to highlight back quoted strings"))
        self.cppHighlightBackQuotedCheckBox.setText(_translate("EditorPropertiesPage", "Highlight back quoted strings"))
        self.cppHighlightEsacepSequencesCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to highlight escape sequences"))
        self.cppHighlightEsacepSequencesCheckBox.setText(_translate("EditorPropertiesPage", "Highlight escape sequences"))
        self.cppVerbatimStringEscapeAllowedCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow verbatim string escape sequences"))
        self.cppVerbatimStringEscapeAllowedCheckBox.setText(_translate("EditorPropertiesPage", "Allow verbatim string escape sequences"))
        self.groupBox_7.setTitle(_translate("EditorPropertiesPage", "CMake Lexer Properties"))
        self.cmakeFoldAtElseCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding at else statement should be possible"))
        self.cmakeFoldAtElseCheckBox.setText(_translate("EditorPropertiesPage", "Fold at else"))
        self.coffeeScriptGroup.setTitle(_translate("EditorPropertiesPage", "CoffeeScript"))
        self.foldCoffeeScriptCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldCoffeeScriptCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.coffeeScriptDollarAllowedCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow \'$\' characters in identifier names"))
        self.coffeeScriptDollarAllowedCheckBox.setText(_translate("EditorPropertiesPage", "Allow \'$\' in identifier names"))
        self.coffeeScriptStylePreprocessorCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to style preprocessor lines"))
        self.coffeeScriptStylePreprocessorCheckBox.setText(_translate("EditorPropertiesPage", "Style preprocessor lines"))
        self.groupBox_4.setTitle(_translate("EditorPropertiesPage", "CSS Lexer Properties"))
        self.foldCssCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldCssCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.cssHssCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to activate HSS support"))
        self.cssHssCheckBox.setText(_translate("EditorPropertiesPage", "HSS support"))
        self.cssLessCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to activate Less CSS support"))
        self.cssLessCheckBox.setText(_translate("EditorPropertiesPage", "Less CSS support"))
        self.cssSassyCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to activate Sassy CSS support"))
        self.cssSassyCheckBox.setText(_translate("EditorPropertiesPage", "Sassy CSS support"))
        self.groupBox_6.setTitle(_translate("EditorPropertiesPage", "D Lexer Properties"))
        self.dIndentClosingBraceCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select, whether the line containing the closing brace should be indented"))
        self.dIndentClosingBraceCheckBox.setText(_translate("EditorPropertiesPage", "Indent closing brace"))
        self.dIndentOpeningBraceCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select, whether the line containing the opening brace should be indented"))
        self.dIndentOpeningBraceCheckBox.setText(_translate("EditorPropertiesPage", "Indent opening brace"))
        self.foldDAtElseCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding at else statement should be possible"))
        self.foldDAtElseCheckBox.setText(_translate("EditorPropertiesPage", "Fold at else"))
        self.foldDCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldDCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.gettextGroup.setTitle(_translate("EditorPropertiesPage", "Gettext Lexer Properties"))
        self.foldPoCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldPoCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.groupBox_10.setTitle(_translate("EditorPropertiesPage", "HTML Lexer Properties"))
        self.foldHtmlPreprocessorCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of preprocessor directives shall be possible"))
        self.foldHtmlPreprocessorCheckBox.setText(_translate("EditorPropertiesPage", "Fold preprocessor directives"))
        self.foldHtmlScriptCommentsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable folding of script comments"))
        self.foldHtmlScriptCommentsCheckBox.setText(_translate("EditorPropertiesPage", "Fold script comments"))
        self.foldHtmlScriptHereDocsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable folding of script heredocs"))
        self.foldHtmlScriptHereDocsCheckBox.setText(_translate("EditorPropertiesPage", "Fold script heredocs"))
        self.htmlCaseSensitiveTagsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether HTML tags should be case sensitive"))
        self.htmlCaseSensitiveTagsCheckBox.setText(_translate("EditorPropertiesPage", "Case sensitive tags"))
        self.htmlDjangoCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable support for Django templates"))
        self.htmlDjangoCheckBox.setText(_translate("EditorPropertiesPage", "Enable Django templates"))
        self.htmlMakoCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable support for Mako templates"))
        self.htmlMakoCheckBox.setText(_translate("EditorPropertiesPage", "Enable Mako templates"))
        self.xmlGroup.setTitle(_translate("EditorPropertiesPage", "XML Lexer Properties"))
        self.xmlSyleScriptsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable styling of scripts"))
        self.xmlSyleScriptsCheckBox.setText(_translate("EditorPropertiesPage", "Style scripts"))
        self.jsonGroup.setTitle(_translate("EditorPropertiesPage", "JSON"))
        self.jsonHighlightCommentsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable highlighting of line/block comments"))
        self.jsonHighlightCommentsCheckBox.setText(_translate("EditorPropertiesPage", "Highlight comments"))
        self.jsonHighlightEscapeCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable highlighting of escape sequences in strings"))
        self.jsonHighlightEscapeCheckBox.setText(_translate("EditorPropertiesPage", "Highlight escape sequences"))
        self.pascalGroup.setTitle(_translate("EditorPropertiesPage", "Pascal Lexer Properties"))
        self.foldPascalCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldPascalCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.foldPascalPreprocessorCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of preprocessor directives shall be possible"))
        self.foldPascalPreprocessorCheckBox.setText(_translate("EditorPropertiesPage", "Fold preprocessor directives"))
        self.pascalSmartHighlightingCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable smart highlighting of keywords"))
        self.pascalSmartHighlightingCheckBox.setText(_translate("EditorPropertiesPage", "Smart Highlighting"))
        self.groupBox_9.setTitle(_translate("EditorPropertiesPage", "Perl Lexer Properties"))
        self.foldPerlCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldPerlCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.foldPerlPackagesCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable folding of Perl packages"))
        self.foldPerlPackagesCheckBox.setText(_translate("EditorPropertiesPage", "Fold packages"))
        self.foldPerlPODBlocksCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable folding of Perl POD blocks"))
        self.foldPerlPODBlocksCheckBox.setText(_translate("EditorPropertiesPage", "Fold POD blocks"))
        self.foldPerlAtElseCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding at else statement should be possible"))
        self.foldPerlAtElseCheckBox.setText(_translate("EditorPropertiesPage", "Fold at else"))
        self.postscriptGroup.setTitle(_translate("EditorPropertiesPage", "PostScript Lexer Properties"))
        self.psFoldAtElseCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding at else statement should be possible"))
        self.psFoldAtElseCheckBox.setText(_translate("EditorPropertiesPage", "Fold at else"))
        self.psMarkTokensCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to mark tokens"))
        self.psMarkTokensCheckBox.setText(_translate("EditorPropertiesPage", "Mark Tokens"))
        self.label.setText(_translate("EditorPropertiesPage", "PostScript Level:"))
        self.psLevelSpinBox.setToolTip(_translate("EditorPropertiesPage", "Select the PostScript level"))
        self.groupBox_5.setTitle(_translate("EditorPropertiesPage", "Povray Lexer Properties"))
        self.foldPovrayDirectivesCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of directives shall be possible"))
        self.foldPovrayDirectivesCheckBox.setText(_translate("EditorPropertiesPage", "Fold directives"))
        self.foldPovrayCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldPovrayCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.groupBox_13.setTitle(_translate("EditorPropertiesPage", "Properties Lexer Properties"))
        self.propertiesInitialSpacesCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow initial spaces in a line"))
        self.propertiesInitialSpacesCheckBox.setText(_translate("EditorPropertiesPage", "Allow initial spaces"))
        self.groupBox_8.setTitle(_translate("EditorPropertiesPage", "Python Lexer Properties"))
        self.foldPythonCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldPythonCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.foldPythonStringCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of strings shall be possible"))
        self.foldPythonStringCheckBox.setText(_translate("EditorPropertiesPage", "Fold strings"))
        self.foldPythonQuotesCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of triple quoted strings shall be possible"))
        self.foldPythonQuotesCheckBox.setText(_translate("EditorPropertiesPage", "Fold triple quoted strings"))
        self.pythonAutoindentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether text should be autoindented after a \':\'"))
        self.pythonAutoindentCheckBox.setText(_translate("EditorPropertiesPage", "Auto indentation after \':\'"))
        self.pythonStringsOverNewlineCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow strings to span newline characters"))
        self.pythonStringsOverNewlineCheckBox.setText(_translate("EditorPropertiesPage", "Strings may span newline characters"))
        self.pythonV2UnicodeAllowedCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow Python v2 unicode string literals (e.g. u\"utf8\")"))
        self.pythonV2UnicodeAllowedCheckBox.setText(_translate("EditorPropertiesPage", "Allow v2 unicode string literals"))
        self.pythonV3BinaryAllowedCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow Python v3 binary and octal literals (e.g. 0b1011, 0o712)"))
        self.pythonV3BinaryAllowedCheckBox.setText(_translate("EditorPropertiesPage", "Allow v3 binary and octal literals"))
        self.pythonV3BytesAllowedCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow Python v3 bytes string literals (e.g. b\"bytes\")"))
        self.pythonV3BytesAllowedCheckBox.setText(_translate("EditorPropertiesPage", "Allow v3 bytes string literals"))
        self.pythonHighlightSubidentifierCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to highlight sub-identifiers defined in keyword set 2"))
        self.pythonHighlightSubidentifierCheckBox.setText(_translate("EditorPropertiesPage", "Highlight sub-identifiers"))
        self.label_2.setText(_translate("EditorPropertiesPage", "Highlight bad indentation:"))
        self.pythonBadIndentationComboBox.setToolTip(_translate("EditorPropertiesPage", "Select whether bad indentation shall be highlighted"))
        self.groupBox_14.setTitle(_translate("EditorPropertiesPage", "Ruby Lexer Properties"))
        self.foldRubyCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldRubyCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.groupBox_12.setTitle(_translate("EditorPropertiesPage", "SQL Lexer Properties"))
        self.foldSqlCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldSqlCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.sqlFoldAtElseCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding at else statement should be possible"))
        self.sqlFoldAtElseCheckBox.setText(_translate("EditorPropertiesPage", "Fold at else"))
        self.sqlFoldOnlyBeginCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether only BEGIN blocks can be folded"))
        self.sqlFoldOnlyBeginCheckBox.setText(_translate("EditorPropertiesPage", "Only BEGIN blocks can be folded"))
        self.sqlBackslashEscapesCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable Backslash Escapes"))
        self.sqlBackslashEscapesCheckBox.setText(_translate("EditorPropertiesPage", "Backslash Escapes"))
        self.sqlDottedWordsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select if words may contain dots"))
        self.sqlDottedWordsCheckBox.setText(_translate("EditorPropertiesPage", "Words may contain dots"))
        self.sqlHashCommentsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow \'#\' as a comment character"))
        self.sqlHashCommentsCheckBox.setText(_translate("EditorPropertiesPage", "Allow \'#\' as comment character"))
        self.sqlQuotedIdentifiersCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable quoted identifiers"))
        self.sqlQuotedIdentifiersCheckBox.setText(_translate("EditorPropertiesPage", "Enable quoted identifiers"))
        self.groupBox_15.setTitle(_translate("EditorPropertiesPage", "TCL Lexer Properties"))
        self.foldTclCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldTclCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.groupBox_16.setTitle(_translate("EditorPropertiesPage", "TeX Lexer Properties"))
        self.foldTexCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldTexCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.texProcessCommentsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to treat comments as TeX source"))
        self.texProcessCommentsCheckBox.setText(_translate("EditorPropertiesPage", "Treat comments as TeX source"))
        self.texProcessIfCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to treat \\if<unknown> as a command"))
        self.texProcessIfCheckBox.setText(_translate("EditorPropertiesPage", "Treat \\if<unknown> as command"))
        self.groupBox_11.setTitle(_translate("EditorPropertiesPage", "VHDL Lexer Properties"))
        self.vhdlFoldAtParenthesisCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of blocks at a parenthesis shall be possible"))
        self.vhdlFoldAtParenthesisCheckBox.setText(_translate("EditorPropertiesPage", "Fold at parenthesis"))
        self.vhdlFoldAtBeginCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of begin blocks shall be possible"))
        self.vhdlFoldAtBeginCheckBox.setText(_translate("EditorPropertiesPage", "Fold at begin"))
        self.vhdlFoldAtElseCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding at else statement should be possible"))
        self.vhdlFoldAtElseCheckBox.setText(_translate("EditorPropertiesPage", "Fold at else"))
        self.vhdlFoldCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.vhdlFoldCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))
        self.yamlGroup.setTitle(_translate("EditorPropertiesPage", "YAML Lexer Properties"))
        self.foldYamlCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible"))
        self.foldYamlCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    EditorPropertiesPage = QtWidgets.QWidget()
    ui = Ui_EditorPropertiesPage()
    ui.setupUi(EditorPropertiesPage)
    EditorPropertiesPage.show()
    sys.exit(app.exec_())

